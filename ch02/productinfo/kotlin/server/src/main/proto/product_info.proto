// 서비스 정의는 사용하는 프로토콜 버퍼 버전(proto3)을 지정하는 것으로 시작
syntax = "proto3";

option java_multiple_files = true;
// 패키지 이름은 프로토콜 메시지 타입 사이의 이름 충돌을 방지하는데 사용하며 코드 생성에도 사용
package ecommerce;
// 서비스의 서비스 인터페이스를 정의
service ProductInfo {
    // ProductID를 응답으로 반환하는 Product 정보 추가 원격 메서드
    rpc addProduct(Product) returns (ProductID);
    // ProductID를 기반으로 Product 정보를 가져오는 원격 메서드
    rpc getProduct(ProductID) returns (Product);
}

// Product 정보의 메시지 형식/타입 정의
message Product {
    // 메시지 바이너리 형식에서 필드를 식별하는 데 사용하는 고유 필드 번호를 갖는 제품 ID 필드(이름-값)
    // 제품에 대한 고유 식별자
    string id = 1;
    // 제품명
    string name = 2;
    // 제품 설명
    string description = 3;
    // 제품 가격
    float price = 4;
}

// ProductID의 메시지 형식/타입 정의
message ProductID {
    string value = 1;
}
